/* tslint:disable */
/* eslint-disable */
/**
 * CaterFlow.WebAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ActiveOrders
 */
export interface ActiveOrders {
    /**
     * 
     * @type {Array<OrderHeader>}
     * @memberof ActiveOrders
     */
    'waiterOrders'?: Array<OrderHeader> | null;
    /**
     * 
     * @type {Array<OrderHeader>}
     * @memberof ActiveOrders
     */
    'otherOrders'?: Array<OrderHeader> | null;
}
/**
 * 
 * @export
 * @interface AddUser
 */
export interface AddUser {
    /**
     * 
     * @type {number}
     * @memberof AddUser
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AddUser
     */
    'entryCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddUser
     */
    'nickName'?: string | null;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof Category
     */
    'products'?: Array<Product> | null;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {CateringUnit}
     * @memberof Category
     */
    'cateringUnit'?: CateringUnit;
}
/**
 * 
 * @export
 * @interface CategoryDTO
 */
export interface CategoryDTO {
    /**
     * 
     * @type {number}
     * @memberof CategoryDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryDTO
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CateringUnit
 */
export interface CateringUnit {
    /**
     * 
     * @type {number}
     * @memberof CateringUnit
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CateringUnit
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CateringUnit
     */
    'entryCode'?: number;
    /**
     * 
     * @type {Array<Table>}
     * @memberof CateringUnit
     */
    'tables'?: Array<Table> | null;
    /**
     * 
     * @type {Array<CateringUnitUser>}
     * @memberof CateringUnit
     */
    'cateringUnitUsers'?: Array<CateringUnitUser> | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof CateringUnit
     */
    'products'?: Array<Product> | null;
    /**
     * 
     * @type {Array<Category>}
     * @memberof CateringUnit
     */
    'categories'?: Array<Category> | null;
    /**
     * 
     * @type {Array<Order>}
     * @memberof CateringUnit
     */
    'orders'?: Array<Order> | null;
}
/**
 * 
 * @export
 * @interface CateringUnitDTO
 */
export interface CateringUnitDTO {
    /**
     * 
     * @type {number}
     * @memberof CateringUnitDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CateringUnitDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<Table>}
     * @memberof CateringUnitDTO
     */
    'tables'?: Array<Table> | null;
    /**
     * 
     * @type {Array<CateringUnitUserDTO>}
     * @memberof CateringUnitDTO
     */
    'cateringUnitUsers'?: Array<CateringUnitUserDTO> | null;
    /**
     * 
     * @type {Array<Product>}
     * @memberof CateringUnitDTO
     */
    'products'?: Array<Product> | null;
    /**
     * 
     * @type {Array<CategoryDTO>}
     * @memberof CateringUnitDTO
     */
    'categories'?: Array<CategoryDTO> | null;
}
/**
 * 
 * @export
 * @interface CateringUnitListItem
 */
export interface CateringUnitListItem {
    /**
     * 
     * @type {number}
     * @memberof CateringUnitListItem
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CateringUnitListItem
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CateringUnitUser
 */
export interface CateringUnitUser {
    /**
     * 
     * @type {CateringUnit}
     * @memberof CateringUnitUser
     */
    'cateringUnit'?: CateringUnit;
    /**
     * 
     * @type {number}
     * @memberof CateringUnitUser
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {User}
     * @memberof CateringUnitUser
     */
    'user'?: User;
    /**
     * 
     * @type {number}
     * @memberof CateringUnitUser
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CateringUnitUser
     */
    'nickName'?: string | null;
    /**
     * 
     * @type {Role}
     * @memberof CateringUnitUser
     */
    'role'?: Role;
}


/**
 * 
 * @export
 * @interface CateringUnitUserDTO
 */
export interface CateringUnitUserDTO {
    /**
     * 
     * @type {number}
     * @memberof CateringUnitUserDTO
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CateringUnitUserDTO
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CateringUnitUserDTO
     */
    'nickName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CateringUnitUserDTO
     */
    'userEmail'?: string | null;
    /**
     * 
     * @type {Role}
     * @memberof CateringUnitUserDTO
     */
    'role'?: Role;
    /**
     * 
     * @type {string}
     * @memberof CateringUnitUserDTO
     */
    'tokenString'?: string | null;
}


/**
 * 
 * @export
 * @interface ChangeRole
 */
export interface ChangeRole {
    /**
     * 
     * @type {number}
     * @memberof ChangeRole
     */
    'userId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChangeRole
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {Role}
     * @memberof ChangeRole
     */
    'role'?: Role;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ContainType = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type ContainType = typeof ContainType[keyof typeof ContainType];


/**
 * 
 * @export
 * @interface CreateCategory
 */
export interface CreateCategory {
    /**
     * 
     * @type {string}
     * @memberof CreateCategory
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateCategory
     */
    'cateringUnitId'?: number;
}
/**
 * 
 * @export
 * @interface CreateCateringUnitDTO
 */
export interface CreateCateringUnitDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateCateringUnitDTO
     */
    'cateringUnitName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateCateringUnitDTO
     */
    'creatorId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCateringUnitDTO
     */
    'creatorNickName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateCateringUnitDTO
     */
    'tableCount'?: number;
}
/**
 * 
 * @export
 * @interface CreateIngredient
 */
export interface CreateIngredient {
    /**
     * 
     * @type {string}
     * @memberof CreateIngredient
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateIngredient
     */
    'containType'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CreateIngredient
     */
    'plusable'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateIngredient
     */
    'plusPrice'?: number | null;
}
/**
 * 
 * @export
 * @interface CreateOrder
 */
export interface CreateOrder {
    /**
     * 
     * @type {number}
     * @memberof CreateOrder
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateOrder
     */
    'tableNumber'?: number | null;
}
/**
 * 
 * @export
 * @interface CreateProduct
 */
export interface CreateProduct {
    /**
     * 
     * @type {string}
     * @memberof CreateProduct
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateProduct
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateProduct
     */
    'categoryId'?: number;
    /**
     * 
     * @type {ProductCreationPlace}
     * @memberof CreateProduct
     */
    'creationPlace'?: ProductCreationPlace;
    /**
     * 
     * @type {Array<CreateIngredient>}
     * @memberof CreateProduct
     */
    'ingredients'?: Array<CreateIngredient> | null;
    /**
     * 
     * @type {number}
     * @memberof CreateProduct
     */
    'cateringUnitId'?: number;
}


/**
 * 
 * @export
 * @interface CreateSubOrder
 */
export interface CreateSubOrder {
    /**
     * 
     * @type {number}
     * @memberof CreateSubOrder
     */
    'orderId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateSubOrder
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {DiningOption}
     * @memberof CreateSubOrder
     */
    'diningOption'?: DiningOption;
    /**
     * 
     * @type {number}
     * @memberof CreateSubOrder
     */
    'userId'?: number;
    /**
     * 
     * @type {Array<CreateSubOrderItem>}
     * @memberof CreateSubOrder
     */
    'subOrderItems'?: Array<CreateSubOrderItem> | null;
}


/**
 * 
 * @export
 * @interface CreateSubOrderItem
 */
export interface CreateSubOrderItem {
    /**
     * 
     * @type {number}
     * @memberof CreateSubOrderItem
     */
    'id'?: number;
    /**
     * 
     * @type {ProductInOrder}
     * @memberof CreateSubOrderItem
     */
    'product'?: ProductInOrder;
    /**
     * 
     * @type {number}
     * @memberof CreateSubOrderItem
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DiningOption = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type DiningOption = typeof DiningOption[keyof typeof DiningOption];


/**
 * 
 * @export
 * @interface GetCategory
 */
export interface GetCategory {
    /**
     * 
     * @type {number}
     * @memberof GetCategory
     */
    'categoryId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetCategory
     */
    'cateringUnitId'?: number;
}
/**
 * 
 * @export
 * @interface GetOrder
 */
export interface GetOrder {
    /**
     * 
     * @type {number}
     * @memberof GetOrder
     */
    'orderId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrder
     */
    'cateringUnitId'?: number;
}
/**
 * 
 * @export
 * @interface GetProduct
 */
export interface GetProduct {
    /**
     * 
     * @type {number}
     * @memberof GetProduct
     */
    'productId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetProduct
     */
    'cateringUnitId'?: number;
}
/**
 * 
 * @export
 * @interface Ingredient
 */
export interface Ingredient {
    /**
     * 
     * @type {number}
     * @memberof Ingredient
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Ingredient
     */
    'name'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Ingredient
     */
    'plusable'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Ingredient
     */
    'plusPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Ingredient
     */
    'productId'?: number;
    /**
     * 
     * @type {Product}
     * @memberof Ingredient
     */
    'product'?: Product;
}
/**
 * 
 * @export
 * @interface IngredientContain
 */
export interface IngredientContain {
    /**
     * 
     * @type {number}
     * @memberof IngredientContain
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IngredientContain
     */
    'name'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof IngredientContain
     */
    'plusable'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IngredientContain
     */
    'plusPrice'?: number;
    /**
     * 
     * @type {ContainType}
     * @memberof IngredientContain
     */
    'containType'?: ContainType;
}


/**
 * 
 * @export
 * @interface IngredientDTO
 */
export interface IngredientDTO {
    /**
     * 
     * @type {number}
     * @memberof IngredientDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IngredientDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {ContainType}
     * @memberof IngredientDTO
     */
    'containType'?: ContainType;
    /**
     * 
     * @type {boolean}
     * @memberof IngredientDTO
     */
    'plusable'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof IngredientDTO
     */
    'plusPrice'?: number | null;
}


/**
 * 
 * @export
 * @interface IngredientPlusable
 */
export interface IngredientPlusable {
    /**
     * 
     * @type {number}
     * @memberof IngredientPlusable
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IngredientPlusable
     */
    'name'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof IngredientPlusable
     */
    'plusable'?: boolean;
}
/**
 * 
 * @export
 * @interface IngredientProductOrder
 */
export interface IngredientProductOrder {
    /**
     * 
     * @type {number}
     * @memberof IngredientProductOrder
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IngredientProductOrder
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IngredientProductOrder
     */
    'plusPrice'?: number | null;
    /**
     * 
     * @type {ContainType}
     * @memberof IngredientProductOrder
     */
    'containType'?: ContainType;
}


/**
 * 
 * @export
 * @interface Login
 */
export interface Login {
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface ModifySubOrder
 */
export interface ModifySubOrder {
    /**
     * 
     * @type {number}
     * @memberof ModifySubOrder
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModifySubOrder
     */
    'orderId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModifySubOrder
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {Array<ModifySubOrderItem>}
     * @memberof ModifySubOrder
     */
    'subOrderItems'?: Array<ModifySubOrderItem> | null;
}
/**
 * 
 * @export
 * @interface ModifySubOrderItem
 */
export interface ModifySubOrderItem {
    /**
     * 
     * @type {number}
     * @memberof ModifySubOrderItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModifySubOrderItem
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'id'?: number;
    /**
     * 
     * @type {Table}
     * @memberof Order
     */
    'table'?: Table;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'tableId'?: number | null;
    /**
     * 
     * @type {OrderStatus}
     * @memberof Order
     */
    'status'?: OrderStatus;
    /**
     * 
     * @type {Array<SubOrder>}
     * @memberof Order
     */
    'subOrders'?: Array<SubOrder> | null;
    /**
     * 
     * @type {CateringUnit}
     * @memberof Order
     */
    'cateringUnit'?: CateringUnit;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'date'?: string;
}


/**
 * 
 * @export
 * @interface OrderDTO
 */
export interface OrderDTO {
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'tableNumber'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'fullPrice'?: number | null;
    /**
     * 
     * @type {OrderStatus}
     * @memberof OrderDTO
     */
    'status'?: OrderStatus;
    /**
     * 
     * @type {Array<SubOrderDTO>}
     * @memberof OrderDTO
     */
    'subOrders'?: Array<SubOrderDTO> | null;
}


/**
 * 
 * @export
 * @interface OrderHeader
 */
export interface OrderHeader {
    /**
     * 
     * @type {number}
     * @memberof OrderHeader
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderHeader
     */
    'tableNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderHeader
     */
    'date'?: string;
}
/**
 * 
 * @export
 * @interface OrderPay
 */
export interface OrderPay {
    /**
     * 
     * @type {Array<SubOrderItemDTO>}
     * @memberof OrderPay
     */
    'subOrderItems'?: Array<SubOrderItemDTO> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OrderStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type OrderStatus = typeof OrderStatus[keyof typeof OrderStatus];


/**
 * 
 * @export
 * @interface PaySubOrderItem
 */
export interface PaySubOrderItem {
    /**
     * 
     * @type {number}
     * @memberof PaySubOrderItem
     */
    'subOrderItemId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaySubOrderItem
     */
    'amount'?: number;
}
/**
 * 
 * @export
 * @interface PaySubOrderItems
 */
export interface PaySubOrderItems {
    /**
     * 
     * @type {number}
     * @memberof PaySubOrderItems
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaySubOrderItems
     */
    'orderId'?: number;
    /**
     * 
     * @type {Array<PaySubOrderItem>}
     * @memberof PaySubOrderItems
     */
    'subOrderItemIds'?: Array<PaySubOrderItem> | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'price'?: number;
    /**
     * 
     * @type {ProductCreationPlace}
     * @memberof Product
     */
    'creationPlace'?: ProductCreationPlace;
    /**
     * 
     * @type {Category}
     * @memberof Product
     */
    'category'?: Category;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'categoryId'?: number;
    /**
     * 
     * @type {CateringUnit}
     * @memberof Product
     */
    'cateringUnit'?: CateringUnit;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {Array<Ingredient>}
     * @memberof Product
     */
    'ingredients'?: Array<Ingredient> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ProductCreationPlace = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type ProductCreationPlace = typeof ProductCreationPlace[keyof typeof ProductCreationPlace];


/**
 * 
 * @export
 * @interface ProductDTO
 */
export interface ProductDTO {
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'price'?: number;
    /**
     * 
     * @type {ProductCreationPlace}
     * @memberof ProductDTO
     */
    'creationPlace'?: ProductCreationPlace;
    /**
     * 
     * @type {CategoryDTO}
     * @memberof ProductDTO
     */
    'category'?: CategoryDTO;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    'categoryId'?: number;
    /**
     * 
     * @type {Array<IngredientDTO>}
     * @memberof ProductDTO
     */
    'ingredients'?: Array<IngredientDTO> | null;
}


/**
 * 
 * @export
 * @interface ProductHeader
 */
export interface ProductHeader {
    /**
     * 
     * @type {number}
     * @memberof ProductHeader
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductHeader
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductHeader
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface ProductInOrder
 */
export interface ProductInOrder {
    /**
     * 
     * @type {number}
     * @memberof ProductInOrder
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductInOrder
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<IngredientContain>}
     * @memberof ProductInOrder
     */
    'ingredients'?: Array<IngredientContain> | null;
}
/**
 * 
 * @export
 * @interface ProductIngredients
 */
export interface ProductIngredients {
    /**
     * 
     * @type {number}
     * @memberof ProductIngredients
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductIngredients
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<IngredientPlusable>}
     * @memberof ProductIngredients
     */
    'ingredients'?: Array<IngredientPlusable> | null;
}
/**
 * 
 * @export
 * @interface ProductOrder
 */
export interface ProductOrder {
    /**
     * 
     * @type {number}
     * @memberof ProductOrder
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOrder
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductOrder
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductOrder
     */
    'categoryId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductOrder
     */
    'productId'?: number;
    /**
     * 
     * @type {ProductCreationPlace}
     * @memberof ProductOrder
     */
    'creationPlace'?: ProductCreationPlace;
    /**
     * 
     * @type {Array<IngredientProductOrder>}
     * @memberof ProductOrder
     */
    'ingredients'?: Array<IngredientProductOrder> | null;
}


/**
 * 
 * @export
 * @interface ProductsByCategory
 */
export interface ProductsByCategory {
    /**
     * 
     * @type {string}
     * @memberof ProductsByCategory
     */
    'categoryName'?: string | null;
    /**
     * 
     * @type {Array<ProductHeader>}
     * @memberof ProductsByCategory
     */
    'products'?: Array<ProductHeader> | null;
}
/**
 * 
 * @export
 * @interface RegisterUser
 */
export interface RegisterUser {
    /**
     * 
     * @type {string}
     * @memberof RegisterUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterUser
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Role = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type Role = typeof Role[keyof typeof Role];


/**
 * 
 * @export
 * @interface SubOrder
 */
export interface SubOrder {
    /**
     * 
     * @type {number}
     * @memberof SubOrder
     */
    'id'?: number;
    /**
     * 
     * @type {SubOrderStatus}
     * @memberof SubOrder
     */
    'drinkStatus'?: SubOrderStatus;
    /**
     * 
     * @type {SubOrderStatus}
     * @memberof SubOrder
     */
    'kitchenStatus'?: SubOrderStatus;
    /**
     * 
     * @type {string}
     * @memberof SubOrder
     */
    'waiterName'?: string | null;
    /**
     * 
     * @type {Array<SubOrderItem>}
     * @memberof SubOrder
     */
    'subOrderItems'?: Array<SubOrderItem> | null;
    /**
     * 
     * @type {string}
     * @memberof SubOrder
     */
    'date'?: string;
    /**
     * 
     * @type {DiningOption}
     * @memberof SubOrder
     */
    'diningOption'?: DiningOption;
    /**
     * 
     * @type {number}
     * @memberof SubOrder
     */
    'orderId'?: number;
    /**
     * 
     * @type {Order}
     * @memberof SubOrder
     */
    'order'?: Order;
}


/**
 * 
 * @export
 * @interface SubOrderDTO
 */
export interface SubOrderDTO {
    /**
     * 
     * @type {number}
     * @memberof SubOrderDTO
     */
    'id'?: number;
    /**
     * 
     * @type {SubOrderStatus}
     * @memberof SubOrderDTO
     */
    'drinkStatus'?: SubOrderStatus;
    /**
     * 
     * @type {SubOrderStatus}
     * @memberof SubOrderDTO
     */
    'kitchenStatus'?: SubOrderStatus;
    /**
     * 
     * @type {Array<SubOrderItemDTO>}
     * @memberof SubOrderDTO
     */
    'subOrderItems'?: Array<SubOrderItemDTO> | null;
    /**
     * 
     * @type {string}
     * @memberof SubOrderDTO
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubOrderDTO
     */
    'waiterName'?: string | null;
    /**
     * 
     * @type {DiningOption}
     * @memberof SubOrderDTO
     */
    'diningOption'?: DiningOption;
}


/**
 * 
 * @export
 * @interface SubOrderItem
 */
export interface SubOrderItem {
    /**
     * 
     * @type {number}
     * @memberof SubOrderItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubOrderItem
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubOrderItem
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubOrderItem
     */
    'amountToPay'?: number;
    /**
     * 
     * @type {ProductOrder}
     * @memberof SubOrderItem
     */
    'product'?: ProductOrder;
    /**
     * 
     * @type {number}
     * @memberof SubOrderItem
     */
    'productId'?: number;
    /**
     * 
     * @type {SubOrder}
     * @memberof SubOrderItem
     */
    'subOrder'?: SubOrder;
    /**
     * 
     * @type {number}
     * @memberof SubOrderItem
     */
    'subOrderId'?: number;
}
/**
 * 
 * @export
 * @interface SubOrderItemDTO
 */
export interface SubOrderItemDTO {
    /**
     * 
     * @type {number}
     * @memberof SubOrderItemDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubOrderItemDTO
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubOrderItemDTO
     */
    'amountToPay'?: number;
    /**
     * 
     * @type {SubOrderItemProduct}
     * @memberof SubOrderItemDTO
     */
    'product'?: SubOrderItemProduct;
}
/**
 * 
 * @export
 * @interface SubOrderItemProduct
 */
export interface SubOrderItemProduct {
    /**
     * 
     * @type {number}
     * @memberof SubOrderItemProduct
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubOrderItemProduct
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SubOrderItemProduct
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubOrderItemProduct
     */
    'productId'?: number;
    /**
     * 
     * @type {Array<IngredientDTO>}
     * @memberof SubOrderItemProduct
     */
    'ingredients'?: Array<IngredientDTO> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SubOrderStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type SubOrderStatus = typeof SubOrderStatus[keyof typeof SubOrderStatus];


/**
 * 
 * @export
 * @interface Table
 */
export interface Table {
    /**
     * 
     * @type {number}
     * @memberof Table
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Table
     */
    'number'?: number;
    /**
     * 
     * @type {CateringUnit}
     * @memberof Table
     */
    'cateringUnit'?: CateringUnit;
    /**
     * 
     * @type {number}
     * @memberof Table
     */
    'cateringUnitId'?: number;
}
/**
 * 
 * @export
 * @interface TableCateringUnitDTO
 */
export interface TableCateringUnitDTO {
    /**
     * 
     * @type {number}
     * @memberof TableCateringUnitDTO
     */
    'tableCounter'?: number;
    /**
     * 
     * @type {number}
     * @memberof TableCateringUnitDTO
     */
    'cateringUnitId'?: number;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'tokenString'?: string | null;
}
/**
 * 
 * @export
 * @interface UnitDetails
 */
export interface UnitDetails {
    /**
     * 
     * @type {number}
     * @memberof UnitDetails
     */
    'entryCode'?: number;
    /**
     * 
     * @type {number}
     * @memberof UnitDetails
     */
    'tableCounter'?: number;
}
/**
 * 
 * @export
 * @interface UpdateSubOrderState
 */
export interface UpdateSubOrderState {
    /**
     * 
     * @type {number}
     * @memberof UpdateSubOrderState
     */
    'cateringUnitId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateSubOrderState
     */
    'subOrderId'?: number;
    /**
     * 
     * @type {SubOrderStatus}
     * @memberof UpdateSubOrderState
     */
    'newStatus'?: SubOrderStatus;
    /**
     * 
     * @type {ProductCreationPlace}
     * @memberof UpdateSubOrderState
     */
    'creationPlace'?: ProductCreationPlace;
}


/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'normalizedUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'normalizedEmail'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'securityStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'concurrencyStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lockoutEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {Array<CateringUnitUser>}
     * @memberof User
     */
    'cateringUnitUsers'?: Array<CateringUnitUser> | null;
}
/**
 * 
 * @export
 * @interface UserUnitInfo
 */
export interface UserUnitInfo {
    /**
     * 
     * @type {string}
     * @memberof UserUnitInfo
     */
    'nickName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUnitInfo
     */
    'tokenString'?: string | null;
}

/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryCateringUnitIdGet: async (cateringUnitId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cateringUnitId' is not null or undefined
            assertParamExists('apiCategoryCateringUnitIdGet', 'cateringUnitId', cateringUnitId)
            const localVarPath = `/api/Category/{cateringUnitId}`
                .replace(`{${"cateringUnitId"}}`, encodeURIComponent(String(cateringUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {CategoryDTO} [categoryDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryCateringUnitIdPut: async (cateringUnitId: number, categoryDTO?: CategoryDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cateringUnitId' is not null or undefined
            assertParamExists('apiCategoryCateringUnitIdPut', 'cateringUnitId', cateringUnitId)
            const localVarPath = `/api/Category/{cateringUnitId}`
                .replace(`{${"cateringUnitId"}}`, encodeURIComponent(String(cateringUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetCategory} [getCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryDelete: async (getCategory?: GetCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [categoryId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryGet: async (categoryId?: number, cateringUnitId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (cateringUnitId !== undefined) {
                localVarQueryParameter['CateringUnitId'] = cateringUnitId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCategory} [createCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryPost: async (createCategory?: CreateCategory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryCateringUnitIdGet(cateringUnitId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryCateringUnitIdGet(cateringUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {CategoryDTO} [categoryDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryCateringUnitIdPut(cateringUnitId: number, categoryDTO?: CategoryDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryCateringUnitIdPut(cateringUnitId, categoryDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetCategory} [getCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryDelete(getCategory?: GetCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryDelete(getCategory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [categoryId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryGet(categoryId?: number, cateringUnitId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryGet(categoryId, cateringUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCategory} [createCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryPost(createCategory?: CreateCategory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryPost(createCategory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryCateringUnitIdGet(cateringUnitId: number, options?: any): AxiosPromise<Array<CategoryDTO>> {
            return localVarFp.apiCategoryCateringUnitIdGet(cateringUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {CategoryDTO} [categoryDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryCateringUnitIdPut(cateringUnitId: number, categoryDTO?: CategoryDTO, options?: any): AxiosPromise<CategoryDTO> {
            return localVarFp.apiCategoryCateringUnitIdPut(cateringUnitId, categoryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetCategory} [getCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryDelete(getCategory?: GetCategory, options?: any): AxiosPromise<void> {
            return localVarFp.apiCategoryDelete(getCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [categoryId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryGet(categoryId?: number, cateringUnitId?: number, options?: any): AxiosPromise<CategoryDTO> {
            return localVarFp.apiCategoryGet(categoryId, cateringUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCategory} [createCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryPost(createCategory?: CreateCategory, options?: any): AxiosPromise<CategoryDTO> {
            return localVarFp.apiCategoryPost(createCategory, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {number} cateringUnitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryCateringUnitIdGet(cateringUnitId: number, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryCateringUnitIdGet(cateringUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} cateringUnitId 
     * @param {CategoryDTO} [categoryDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryCateringUnitIdPut(cateringUnitId: number, categoryDTO?: CategoryDTO, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryCateringUnitIdPut(cateringUnitId, categoryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetCategory} [getCategory] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryDelete(getCategory?: GetCategory, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryDelete(getCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [categoryId] 
     * @param {number} [cateringUnitId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryGet(categoryId?: number, cateringUnitId?: number, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryGet(categoryId, cateringUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCategory} [createCategory] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryPost(createCategory?: CreateCategory, options?: AxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryPost(createCategory, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CateringUnitApi - axios parameter creator
 * @export
 */
export const CateringUnitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangeRole} [changeRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitChangeRolePut: async (changeRole?: ChangeRole, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CateringUnit/change-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeRole, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitGet: async (userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CateringUnit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCateringUnitDTO} [createCateringUnitDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitPost: async (createCateringUnitDTO?: CreateCateringUnitDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CateringUnit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCateringUnitDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddUser} [addUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitPut: async (addUser?: AddUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/CateringUnit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitUnitDetailsUnitIdGet: async (unitId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unitId' is not null or undefined
            assertParamExists('apiCateringUnitUnitDetailsUnitIdGet', 'unitId', unitId)
            const localVarPath = `/api/CateringUnit/unit-details/{unitId}`
                .replace(`{${"unitId"}}`, encodeURIComponent(String(unitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitUnitIdGet: async (unitId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unitId' is not null or undefined
            assertParamExists('apiCateringUnitUnitIdGet', 'unitId', unitId)
            const localVarPath = `/api/CateringUnit/{unitId}`
                .replace(`{${"unitId"}}`, encodeURIComponent(String(unitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitUsersUnitIdGet: async (unitId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unitId' is not null or undefined
            assertParamExists('apiCateringUnitUsersUnitIdGet', 'unitId', unitId)
            const localVarPath = `/api/CateringUnit/users/{unitId}`
                .replace(`{${"unitId"}}`, encodeURIComponent(String(unitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CateringUnitApi - functional programming interface
 * @export
 */
export const CateringUnitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CateringUnitApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangeRole} [changeRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCateringUnitChangeRolePut(changeRole?: ChangeRole, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CateringUnitUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCateringUnitChangeRolePut(changeRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCateringUnitGet(userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CateringUnitDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCateringUnitGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCateringUnitDTO} [createCateringUnitDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCateringUnitPost(createCateringUnitDTO?: CreateCateringUnitDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CateringUnitDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCateringUnitPost(createCateringUnitDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddUser} [addUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCateringUnitPut(addUser?: AddUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CateringUnitUserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCateringUnitPut(addUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCateringUnitUnitDetailsUnitIdGet(unitId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnitDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCateringUnitUnitDetailsUnitIdGet(unitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCateringUnitUnitIdGet(unitId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CateringUnitDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCateringUnitUnitIdGet(unitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCateringUnitUsersUnitIdGet(unitId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CateringUnitUserDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCateringUnitUsersUnitIdGet(unitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CateringUnitApi - factory interface
 * @export
 */
export const CateringUnitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CateringUnitApiFp(configuration)
    return {
        /**
         * 
         * @param {ChangeRole} [changeRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitChangeRolePut(changeRole?: ChangeRole, options?: any): AxiosPromise<CateringUnitUserDTO> {
            return localVarFp.apiCateringUnitChangeRolePut(changeRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitGet(userId?: number, options?: any): AxiosPromise<Array<CateringUnitDTO>> {
            return localVarFp.apiCateringUnitGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCateringUnitDTO} [createCateringUnitDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitPost(createCateringUnitDTO?: CreateCateringUnitDTO, options?: any): AxiosPromise<CateringUnitDTO> {
            return localVarFp.apiCateringUnitPost(createCateringUnitDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddUser} [addUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitPut(addUser?: AddUser, options?: any): AxiosPromise<CateringUnitUserDTO> {
            return localVarFp.apiCateringUnitPut(addUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitUnitDetailsUnitIdGet(unitId: number, options?: any): AxiosPromise<UnitDetails> {
            return localVarFp.apiCateringUnitUnitDetailsUnitIdGet(unitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitUnitIdGet(unitId: number, options?: any): AxiosPromise<CateringUnitDTO> {
            return localVarFp.apiCateringUnitUnitIdGet(unitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} unitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCateringUnitUsersUnitIdGet(unitId: number, options?: any): AxiosPromise<Array<CateringUnitUserDTO>> {
            return localVarFp.apiCateringUnitUsersUnitIdGet(unitId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CateringUnitApi - object-oriented interface
 * @export
 * @class CateringUnitApi
 * @extends {BaseAPI}
 */
export class CateringUnitApi extends BaseAPI {
    /**
     * 
     * @param {ChangeRole} [changeRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CateringUnitApi
     */
    public apiCateringUnitChangeRolePut(changeRole?: ChangeRole, options?: AxiosRequestConfig) {
        return CateringUnitApiFp(this.configuration).apiCateringUnitChangeRolePut(changeRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CateringUnitApi
     */
    public apiCateringUnitGet(userId?: number, options?: AxiosRequestConfig) {
        return CateringUnitApiFp(this.configuration).apiCateringUnitGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCateringUnitDTO} [createCateringUnitDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CateringUnitApi
     */
    public apiCateringUnitPost(createCateringUnitDTO?: CreateCateringUnitDTO, options?: AxiosRequestConfig) {
        return CateringUnitApiFp(this.configuration).apiCateringUnitPost(createCateringUnitDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddUser} [addUser] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CateringUnitApi
     */
    public apiCateringUnitPut(addUser?: AddUser, options?: AxiosRequestConfig) {
        return CateringUnitApiFp(this.configuration).apiCateringUnitPut(addUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} unitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CateringUnitApi
     */
    public apiCateringUnitUnitDetailsUnitIdGet(unitId: number, options?: AxiosRequestConfig) {
        return CateringUnitApiFp(this.configuration).apiCateringUnitUnitDetailsUnitIdGet(unitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} unitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CateringUnitApi
     */
    public apiCateringUnitUnitIdGet(unitId: number, options?: AxiosRequestConfig) {
        return CateringUnitApiFp(this.configuration).apiCateringUnitUnitIdGet(unitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} unitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CateringUnitApi
     */
    public apiCateringUnitUsersUnitIdGet(unitId: number, options?: AxiosRequestConfig) {
        return CateringUnitApiFp(this.configuration).apiCateringUnitUsersUnitIdGet(unitId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Login} [login] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginLoginPost: async (login?: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(login, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Login} [login] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginLoginPost(login?: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginLoginPost(login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {Login} [login] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginLoginPost(login?: Login, options?: any): AxiosPromise<Token> {
            return localVarFp.apiLoginLoginPost(login, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {Login} [login] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginLoginPost(login?: Login, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).apiLoginLoginPost(login, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [cateringUnitId] 
         * @param {string} [waiterName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderActiveGet: async (cateringUnitId?: number, waiterName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cateringUnitId !== undefined) {
                localVarQueryParameter['cateringUnitId'] = cateringUnitId;
            }

            if (waiterName !== undefined) {
                localVarQueryParameter['waiterName'] = waiterName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [orderId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGet: async (orderId?: number, cateringUnitId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderId !== undefined) {
                localVarQueryParameter['OrderId'] = orderId;
            }

            if (cateringUnitId !== undefined) {
                localVarQueryParameter['CateringUnitId'] = cateringUnitId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [orderId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPayableGet: async (orderId?: number, cateringUnitId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/payable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderId !== undefined) {
                localVarQueryParameter['OrderId'] = orderId;
            }

            if (cateringUnitId !== undefined) {
                localVarQueryParameter['CateringUnitId'] = cateringUnitId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PaySubOrderItems} [paySubOrderItems] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPaymentPut: async (paySubOrderItems?: PaySubOrderItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paySubOrderItems, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrder} [createOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPost: async (createOrder?: CreateOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetOrder} [getOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderServedPut: async (getOrder?: GetOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/served`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [cateringUnitId] 
         * @param {ProductCreationPlace} [place] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderSubordersGet: async (cateringUnitId?: number, place?: ProductCreationPlace, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/suborders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cateringUnitId !== undefined) {
                localVarQueryParameter['cateringUnitId'] = cateringUnitId;
            }

            if (place !== undefined) {
                localVarQueryParameter['place'] = place;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSubOrder} [createSubOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderSubordersPost: async (createSubOrder?: CreateSubOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/suborders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSubOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModifySubOrder} [modifySubOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderSubordersPut: async (modifySubOrder?: ModifySubOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/suborders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifySubOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateSubOrderState} [updateSubOrderState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderSubordersStatePut: async (updateSubOrderState?: UpdateSubOrderState, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Order/suborders/state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSubOrderState, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [cateringUnitId] 
         * @param {string} [waiterName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderActiveGet(cateringUnitId?: number, waiterName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActiveOrders>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderActiveGet(cateringUnitId, waiterName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [orderId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderGet(orderId?: number, cateringUnitId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderGet(orderId, cateringUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [orderId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderPayableGet(orderId?: number, cateringUnitId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderPay>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderPayableGet(orderId, cateringUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PaySubOrderItems} [paySubOrderItems] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderPaymentPut(paySubOrderItems?: PaySubOrderItems, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderPaymentPut(paySubOrderItems, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateOrder} [createOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderPost(createOrder?: CreateOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderPost(createOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetOrder} [getOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderServedPut(getOrder?: GetOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderServedPut(getOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [cateringUnitId] 
         * @param {ProductCreationPlace} [place] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderSubordersGet(cateringUnitId?: number, place?: ProductCreationPlace, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubOrderDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderSubordersGet(cateringUnitId, place, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateSubOrder} [createSubOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderSubordersPost(createSubOrder?: CreateSubOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderSubordersPost(createSubOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ModifySubOrder} [modifySubOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderSubordersPut(modifySubOrder?: ModifySubOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderSubordersPut(modifySubOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateSubOrderState} [updateSubOrderState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderSubordersStatePut(updateSubOrderState?: UpdateSubOrderState, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubOrderDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderSubordersStatePut(updateSubOrderState, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [cateringUnitId] 
         * @param {string} [waiterName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderActiveGet(cateringUnitId?: number, waiterName?: string, options?: any): AxiosPromise<ActiveOrders> {
            return localVarFp.apiOrderActiveGet(cateringUnitId, waiterName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [orderId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderGet(orderId?: number, cateringUnitId?: number, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.apiOrderGet(orderId, cateringUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [orderId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPayableGet(orderId?: number, cateringUnitId?: number, options?: any): AxiosPromise<OrderPay> {
            return localVarFp.apiOrderPayableGet(orderId, cateringUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaySubOrderItems} [paySubOrderItems] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPaymentPut(paySubOrderItems?: PaySubOrderItems, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.apiOrderPaymentPut(paySubOrderItems, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrder} [createOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPost(createOrder?: CreateOrder, options?: any): AxiosPromise<OrderDTO> {
            return localVarFp.apiOrderPost(createOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetOrder} [getOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderServedPut(getOrder?: GetOrder, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiOrderServedPut(getOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [cateringUnitId] 
         * @param {ProductCreationPlace} [place] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderSubordersGet(cateringUnitId?: number, place?: ProductCreationPlace, options?: any): AxiosPromise<Array<SubOrderDTO>> {
            return localVarFp.apiOrderSubordersGet(cateringUnitId, place, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSubOrder} [createSubOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderSubordersPost(createSubOrder?: CreateSubOrder, options?: any): AxiosPromise<Order> {
            return localVarFp.apiOrderSubordersPost(createSubOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ModifySubOrder} [modifySubOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderSubordersPut(modifySubOrder?: ModifySubOrder, options?: any): AxiosPromise<Order> {
            return localVarFp.apiOrderSubordersPut(modifySubOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateSubOrderState} [updateSubOrderState] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderSubordersStatePut(updateSubOrderState?: UpdateSubOrderState, options?: any): AxiosPromise<SubOrderDTO> {
            return localVarFp.apiOrderSubordersStatePut(updateSubOrderState, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @param {number} [cateringUnitId] 
     * @param {string} [waiterName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderActiveGet(cateringUnitId?: number, waiterName?: string, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderActiveGet(cateringUnitId, waiterName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [orderId] 
     * @param {number} [cateringUnitId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderGet(orderId?: number, cateringUnitId?: number, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderGet(orderId, cateringUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [orderId] 
     * @param {number} [cateringUnitId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderPayableGet(orderId?: number, cateringUnitId?: number, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderPayableGet(orderId, cateringUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaySubOrderItems} [paySubOrderItems] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderPaymentPut(paySubOrderItems?: PaySubOrderItems, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderPaymentPut(paySubOrderItems, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrder} [createOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderPost(createOrder?: CreateOrder, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderPost(createOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetOrder} [getOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderServedPut(getOrder?: GetOrder, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderServedPut(getOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [cateringUnitId] 
     * @param {ProductCreationPlace} [place] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderSubordersGet(cateringUnitId?: number, place?: ProductCreationPlace, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderSubordersGet(cateringUnitId, place, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSubOrder} [createSubOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderSubordersPost(createSubOrder?: CreateSubOrder, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderSubordersPost(createSubOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ModifySubOrder} [modifySubOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderSubordersPut(modifySubOrder?: ModifySubOrder, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderSubordersPut(modifySubOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateSubOrderState} [updateSubOrderState] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderSubordersStatePut(updateSubOrderState?: UpdateSubOrderState, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrderSubordersStatePut(updateSubOrderState, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductCateringUnitIdGet: async (cateringUnitId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cateringUnitId' is not null or undefined
            assertParamExists('apiProductCateringUnitIdGet', 'cateringUnitId', cateringUnitId)
            const localVarPath = `/api/Product/{cateringUnitId}`
                .replace(`{${"cateringUnitId"}}`, encodeURIComponent(String(cateringUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetProduct} [getProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDelete: async (getProduct?: GetProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getProduct, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductGet: async (productId?: number, cateringUnitId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productId !== undefined) {
                localVarQueryParameter['ProductId'] = productId;
            }

            if (cateringUnitId !== undefined) {
                localVarQueryParameter['CateringUnitId'] = cateringUnitId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductIngredientsGet: async (productId?: number, cateringUnitId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Product/ingredients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productId !== undefined) {
                localVarQueryParameter['ProductId'] = productId;
            }

            if (cateringUnitId !== undefined) {
                localVarQueryParameter['CateringUnitId'] = cateringUnitId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProduct} [createProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductPost: async (createProduct?: CreateProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProduct, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [cateringUnitId] 
         * @param {CreateProduct} [createProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductPut: async (productId?: number, cateringUnitId?: number, createProduct?: CreateProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (cateringUnitId !== undefined) {
                localVarQueryParameter['cateringUnitId'] = cateringUnitId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProduct, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductCateringUnitIdGet(cateringUnitId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductsByCategory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductCateringUnitIdGet(cateringUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetProduct} [getProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductDelete(getProduct?: GetProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductDelete(getProduct, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductGet(productId?: number, cateringUnitId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductGet(productId, cateringUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductIngredientsGet(productId?: number, cateringUnitId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductIngredients>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductIngredientsGet(productId, cateringUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateProduct} [createProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductPost(createProduct?: CreateProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductPost(createProduct, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [cateringUnitId] 
         * @param {CreateProduct} [createProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductPut(productId?: number, cateringUnitId?: number, createProduct?: CreateProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductPut(productId, cateringUnitId, createProduct, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductCateringUnitIdGet(cateringUnitId: number, options?: any): AxiosPromise<Array<ProductsByCategory>> {
            return localVarFp.apiProductCateringUnitIdGet(cateringUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetProduct} [getProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductDelete(getProduct?: GetProduct, options?: any): AxiosPromise<void> {
            return localVarFp.apiProductDelete(getProduct, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductGet(productId?: number, cateringUnitId?: number, options?: any): AxiosPromise<ProductDTO> {
            return localVarFp.apiProductGet(productId, cateringUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductIngredientsGet(productId?: number, cateringUnitId?: number, options?: any): AxiosPromise<ProductIngredients> {
            return localVarFp.apiProductIngredientsGet(productId, cateringUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateProduct} [createProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductPost(createProduct?: CreateProduct, options?: any): AxiosPromise<CategoryDTO> {
            return localVarFp.apiProductPost(createProduct, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [productId] 
         * @param {number} [cateringUnitId] 
         * @param {CreateProduct} [createProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductPut(productId?: number, cateringUnitId?: number, createProduct?: CreateProduct, options?: any): AxiosPromise<CategoryDTO> {
            return localVarFp.apiProductPut(productId, cateringUnitId, createProduct, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {number} cateringUnitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductCateringUnitIdGet(cateringUnitId: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductCateringUnitIdGet(cateringUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetProduct} [getProduct] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductDelete(getProduct?: GetProduct, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductDelete(getProduct, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [productId] 
     * @param {number} [cateringUnitId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductGet(productId?: number, cateringUnitId?: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductGet(productId, cateringUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [productId] 
     * @param {number} [cateringUnitId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductIngredientsGet(productId?: number, cateringUnitId?: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductIngredientsGet(productId, cateringUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateProduct} [createProduct] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductPost(createProduct?: CreateProduct, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductPost(createProduct, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [productId] 
     * @param {number} [cateringUnitId] 
     * @param {CreateProduct} [createProduct] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductPut(productId?: number, cateringUnitId?: number, createProduct?: CreateProduct, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductPut(productId, cateringUnitId, createProduct, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RegisterApi - axios parameter creator
 * @export
 */
export const RegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RegisterUser} [registerUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegisterPost: async (registerUser?: RegisterUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisterApi - functional programming interface
 * @export
 */
export const RegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RegisterUser} [registerUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRegisterPost(registerUser?: RegisterUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRegisterPost(registerUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegisterApi - factory interface
 * @export
 */
export const RegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegisterApiFp(configuration)
    return {
        /**
         * 
         * @param {RegisterUser} [registerUser] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRegisterPost(registerUser?: RegisterUser, options?: any): AxiosPromise<Token> {
            return localVarFp.apiRegisterPost(registerUser, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
export class RegisterApi extends BaseAPI {
    /**
     * 
     * @param {RegisterUser} [registerUser] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public apiRegisterPost(registerUser?: RegisterUser, options?: AxiosRequestConfig) {
        return RegisterApiFp(this.configuration).apiRegisterPost(registerUser, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TableApi - axios parameter creator
 * @export
 */
export const TableApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTableCateringUnitIdGet: async (cateringUnitId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cateringUnitId' is not null or undefined
            assertParamExists('apiTableCateringUnitIdGet', 'cateringUnitId', cateringUnitId)
            const localVarPath = `/api/Table/{cateringUnitId}`
                .replace(`{${"cateringUnitId"}}`, encodeURIComponent(String(cateringUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TableCateringUnitDTO} [tableCateringUnitDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTablePut: async (tableCateringUnitDTO?: TableCateringUnitDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Table`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tableCateringUnitDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TableApi - functional programming interface
 * @export
 */
export const TableApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TableApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTableCateringUnitIdGet(cateringUnitId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTableCateringUnitIdGet(cateringUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TableCateringUnitDTO} [tableCateringUnitDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTablePut(tableCateringUnitDTO?: TableCateringUnitDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableCateringUnitDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTablePut(tableCateringUnitDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TableApi - factory interface
 * @export
 */
export const TableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TableApiFp(configuration)
    return {
        /**
         * 
         * @param {number} cateringUnitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTableCateringUnitIdGet(cateringUnitId: number, options?: any): AxiosPromise<number> {
            return localVarFp.apiTableCateringUnitIdGet(cateringUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TableCateringUnitDTO} [tableCateringUnitDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTablePut(tableCateringUnitDTO?: TableCateringUnitDTO, options?: any): AxiosPromise<TableCateringUnitDTO> {
            return localVarFp.apiTablePut(tableCateringUnitDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TableApi - object-oriented interface
 * @export
 * @class TableApi
 * @extends {BaseAPI}
 */
export class TableApi extends BaseAPI {
    /**
     * 
     * @param {number} cateringUnitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public apiTableCateringUnitIdGet(cateringUnitId: number, options?: AxiosRequestConfig) {
        return TableApiFp(this.configuration).apiTableCateringUnitIdGet(cateringUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TableCateringUnitDTO} [tableCateringUnitDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TableApi
     */
    public apiTablePut(tableCateringUnitDTO?: TableCateringUnitDTO, options?: AxiosRequestConfig) {
        return TableApiFp(this.configuration).apiTablePut(tableCateringUnitDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUnitsUserIdGet: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUserUnitsUserIdGet', 'userId', userId)
            const localVarPath = `/api/User/units/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserunitinfoGet: async (userId?: number, cateringUnitId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/User/userunitinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (cateringUnitId !== undefined) {
                localVarQueryParameter['cateringUnitId'] = cateringUnitId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUnitsUserIdGet(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CateringUnitListItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUnitsUserIdGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserUserunitinfoGet(userId?: number, cateringUnitId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUnitInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserUserunitinfoGet(userId, cateringUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUnitsUserIdGet(userId: number, options?: any): AxiosPromise<Array<CateringUnitListItem>> {
            return localVarFp.apiUserUnitsUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [userId] 
         * @param {number} [cateringUnitId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserunitinfoGet(userId?: number, cateringUnitId?: number, options?: any): AxiosPromise<UserUnitInfo> {
            return localVarFp.apiUserUserunitinfoGet(userId, cateringUnitId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserUnitsUserIdGet(userId: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserUnitsUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [userId] 
     * @param {number} [cateringUnitId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserUserunitinfoGet(userId?: number, cateringUnitId?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserUserunitinfoGet(userId, cateringUnitId, options).then((request) => request(this.axios, this.basePath));
    }
}



