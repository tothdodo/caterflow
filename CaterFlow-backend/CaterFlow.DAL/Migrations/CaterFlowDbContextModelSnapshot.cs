// <auto-generated />
using System;
using CaterFlow.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CaterFlow.DAL.Migrations
{
    [DbContext(typeof(CaterFlowDbContext))]
    partial class CaterFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CaterFlow.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CateringUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CateringUnitId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CateringUnitId = 1,
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 2,
                            CateringUnitId = 1,
                            Name = "Appetizer"
                        },
                        new
                        {
                            Id = 3,
                            CateringUnitId = 1,
                            Name = "Pizzák"
                        },
                        new
                        {
                            Id = 4,
                            CateringUnitId = 1,
                            Name = "Main dishes"
                        },
                        new
                        {
                            Id = 5,
                            CateringUnitId = 1,
                            Name = "Desserts"
                        });
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.CateringUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EntryCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CateringUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EntryCode = 123456,
                            Name = "Best Catering Unit"
                        });
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.CateringUnitUser", b =>
                {
                    b.Property<int>("CateringUnitId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("CateringUnitId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CateringUnitUser");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PlusPrice")
                        .HasColumnType("real");

                    b.Property<bool>("Plusable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Ingredient");

                    b.HasData(
                        new
                        {
                            Id = 12,
                            Name = "TomatoSauce",
                            Plusable = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 13,
                            Name = "Cheese",
                            PlusPrice = 1f,
                            Plusable = true,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 14,
                            Name = "Salami",
                            PlusPrice = 2f,
                            Plusable = true,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 1,
                            Name = "TomatoSauce",
                            Plusable = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cheese",
                            PlusPrice = 1f,
                            Plusable = true,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ham",
                            PlusPrice = 2f,
                            Plusable = true,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Grilled chicken",
                            Plusable = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mozzarella",
                            Plusable = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tomato",
                            Plusable = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 7,
                            Name = "Potato",
                            Plusable = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hazelnut",
                            Plusable = false,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 9,
                            Name = "Brownie",
                            Plusable = false,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 15,
                            Name = "TomatoSauce",
                            Plusable = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cheese",
                            PlusPrice = 1f,
                            Plusable = true,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.IngredientProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContainType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("PlusPrice")
                        .HasColumnType("real");

                    b.Property<int>("ProductOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductOrderId");

                    b.ToTable("IngredientProductOrder");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CateringUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CateringUnitId");

                    b.HasIndex("TableId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CateringUnitId")
                        .HasColumnType("int");

                    b.Property<int>("CreationPlace")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CateringUnitId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            CateringUnitId = 1,
                            CreationPlace = 1,
                            Name = "Pizza Margharita",
                            Price = 10.5f
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            CateringUnitId = 1,
                            CreationPlace = 1,
                            Name = "Pizza Salami",
                            Price = 10.5f
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CateringUnitId = 1,
                            CreationPlace = 1,
                            Name = "Pizza Ham",
                            Price = 11.5f
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CateringUnitId = 1,
                            CreationPlace = 1,
                            Name = "Grilled chicken breast with mozzarella tomatoes and mashed potatoes",
                            Price = 14.5f
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CateringUnitId = 1,
                            CreationPlace = 1,
                            Name = "Hazelnut brownie",
                            Price = 5f
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CateringUnitId = 1,
                            CreationPlace = 0,
                            Name = "Water",
                            Price = 1.5f
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CateringUnitId = 1,
                            CreationPlace = 0,
                            Name = "Cola",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CateringUnitId = 1,
                            CreationPlace = 0,
                            Name = "Fanta",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            CateringUnitId = 1,
                            CreationPlace = 0,
                            Name = "Sprite",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CateringUnitId = 1,
                            CreationPlace = 0,
                            Name = "Beer 0.3",
                            Price = 3f
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CateringUnitId = 1,
                            CreationPlace = 0,
                            Name = "Beer 0.5",
                            Price = 4.5f
                        });
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreationPlace")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.SubOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiningOption")
                        .HasColumnType("int");

                    b.Property<int>("DrinkStatus")
                        .HasColumnType("int");

                    b.Property<int>("KitchenStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("WaiterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("SubOrder");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.SubOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountToPay")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SubOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SubOrderId");

                    b.ToTable("SubOrderItem");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CateringUnitId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CateringUnitId");

                    b.ToTable("Table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CateringUnitId = 1,
                            Number = 1
                        },
                        new
                        {
                            Id = 2,
                            CateringUnitId = 1,
                            Number = 2
                        },
                        new
                        {
                            Id = 3,
                            CateringUnitId = 1,
                            Number = 3
                        },
                        new
                        {
                            Id = 4,
                            CateringUnitId = 1,
                            Number = 4
                        },
                        new
                        {
                            Id = 5,
                            CateringUnitId = 1,
                            Number = 5
                        },
                        new
                        {
                            Id = 6,
                            CateringUnitId = 1,
                            Number = 6
                        },
                        new
                        {
                            Id = 7,
                            CateringUnitId = 1,
                            Number = 7
                        },
                        new
                        {
                            Id = 8,
                            CateringUnitId = 1,
                            Number = 8
                        },
                        new
                        {
                            Id = 9,
                            CateringUnitId = 1,
                            Number = 9
                        },
                        new
                        {
                            Id = 10,
                            CateringUnitId = 1,
                            Number = 10
                        });
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Category", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.CateringUnit", "CateringUnit")
                        .WithMany("Categories")
                        .HasForeignKey("CateringUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CateringUnit");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.CateringUnitUser", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.CateringUnit", "CateringUnit")
                        .WithMany("CateringUnitUsers")
                        .HasForeignKey("CateringUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaterFlow.DAL.Entities.User", "User")
                        .WithMany("CateringUnitUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CateringUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Ingredient", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.Product", "Product")
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.IngredientProductOrder", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.ProductOrder", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Order", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.CateringUnit", "CateringUnit")
                        .WithMany("Orders")
                        .HasForeignKey("CateringUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaterFlow.DAL.Entities.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.Navigation("CateringUnit");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Product", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaterFlow.DAL.Entities.CateringUnit", "CateringUnit")
                        .WithMany("Products")
                        .HasForeignKey("CateringUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CateringUnit");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.SubOrder", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.Order", "Order")
                        .WithMany("SubOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.SubOrderItem", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.ProductOrder", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaterFlow.DAL.Entities.SubOrder", "SubOrder")
                        .WithMany("SubOrderItems")
                        .HasForeignKey("SubOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubOrder");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Table", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.CateringUnit", "CateringUnit")
                        .WithMany("Tables")
                        .HasForeignKey("CateringUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CateringUnit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaterFlow.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CaterFlow.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.CateringUnit", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("CateringUnitUsers");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Order", b =>
                {
                    b.Navigation("SubOrders");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.Product", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.ProductOrder", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.SubOrder", b =>
                {
                    b.Navigation("SubOrderItems");
                });

            modelBuilder.Entity("CaterFlow.DAL.Entities.User", b =>
                {
                    b.Navigation("CateringUnitUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
